#reg values
# sourcery skip: remove-duplicate-dict-key
reg_values = {
    'zero':'0b00000000000000000000000000000000', 'ra':'0b00000000000000000000000000000000', 'sp':'0b00000000000000000000000000000000',
    'gp':'0b00000000000000000000000000000000', 'tp':'0b00000000000000000000000000000000', 't0':'0b00000000000000000000000000000000',
    't1':'0b00000000000000000000000000000000', 't2':'0b00000000000000000000000000000000', 's0':'0b00000000000000000000000000000000',
    's1':'0b00000000000000000000000000000000', 'a0':'0b00000000000000000000000000000000', 'a1':'0b00000000000000000000000000000000',
    'a2':'0b00000000000000000000000000000000', 'a3':'0b00000000000000000000000000000000', 'a4':'0b00000000000000000000000000000000',
    'a5':'0b00000000000000000000000000000000', 'a6':'0b00000000000000000000000000000000', 'a7':'0b00000000000000000000000000000000',
    's2':'0b00000000000000000000000000000000', 's3':'0b00000000000000000000000000000000', 's4':'0b00000000000000000000000000000000',
    's5':'0b00000000000000000000000000000000', 's6':'0b00000000000000000000000000000000', 's7':'0b00000000000000000000000000000000',
    's8':'0b00000000000000000000000000000000', 's9':'0b00000000000000000000000000000000', 's10':'0b00000000000000000000000000000000',
    's11':'0b00000000000000000000000000000000', 't3':'0b00000000000000000000000000000000', 't4':'0b00000000000000000000000000000000',
    't5':'0b00000000000000000000000000000000', 't6':'0b00000000000000000000000000000000'
}

#memory allocation of registers
memory = {
    '0x00010000': '0b00000000000000000000000000000000', '0x00010004': '0b00000000000000000000000000000000',
    '0x00010008': '0b00000000000000000000000000000000', '0x0001000c': '0b00000000000000000000000000000000', 
    '0x00010010': '0b00000000000000000000000000000000', '0x00010014': '0b00000000000000000000000000000000',
    '0x00010018': '0b00000000000000000000000000000000', '0x0001001c': '0b00000000000000000000000000000000',
    '0x00010020': '0b00000000000000000000000000000000', '0x00010024': '0b00000000000000000000000000000000',
    '0x00010028': '0b00000000000000000000000000000000', '0x0001002c': '0b00000000000000000000000000000000',
    '0x00010030': '0b00000000000000000000000000000000', '0x00010034': '0b00000000000000000000000000000000',
    '0x00010038': '0b00000000000000000000000000000000', '0x0001003c': '0b00000000000000000000000000000000',
    '0x00010040': '0b00000000000000000000000000000000', '0x00010044': '0b00000000000000000000000000000000',
    '0x00010048': '0b00000000000000000000000000000000', '0x0001004c': '0b00000000000000000000000000000000',
    '0x00010050': '0b00000000000000000000000000000000', '0x00010054': '0b00000000000000000000000000000000',
    '0x00010058': '0b00000000000000000000000000000000', '0x0001005c': '0b00000000000000000000000000000000',
    '0x00010060': '0b00000000000000000000000000000000', '0x00010064': '0b00000000000000000000000000000000',
    '0x00010068': '0b00000000000000000000000000000000', '0x0001006c': '0b00000000000000000000000000000000',
    '0x00010070': '0b00000000000000000000000000000000', '0x00010074': '0b00000000000000000000000000000000',
    '0x00010078': '0b00000000000000000000000000000000', '0x0001007c': '0b00000000000000000000000000000000'
}

#dictionary for storing reg values
dict_registers = {
    '00000':'0b00000000000000000000000000000000', '00001':'0b00000000000000000000000000000000', '00010':'0b00000000000000000000000000000000', '00011':'0b00000000000000000000000000000000', '00100':'0b00000000000000000000000000000000',
    '00101':'0b00000000000000000000000000000000', '00110':'0b00000000000000000000000000000000', '00111':'0b00000000000000000000000000000000', '01000':'0b00000000000000000000000000000000', '01001':'0b00000000000000000000000000000000',
    '01010':'0b00000000000000000000000000000000', '01011':'0b00000000000000000000000000000000', '01100':'0b00000000000000000000000000000000', '01101':'0b00000000000000000000000000000000', '01110':'0b00000000000000000000000000000000',
    '01111':'0b00000000000000000000000000000000', '10000':'0b00000000000000000000000000000000', '10001':'0b00000000000000000000000000000000', '10010':'0b00000000000000000000000000000000', '10011':'0b00000000000000000000000000000000',
    '10100':'0b00000000000000000000000000000000', '10101':'0b00000000000000000000000000000000', '10110':'0b00000000000000000000000000000000', '10111':'0b00000000000000000000000000000000', '11000':'0b00000000000000000000000000000000',
    '11000':'0b00000000000000000000000000000000', '11010':'0b00000000000000000000000000000000', '11011':'0b00000000000000000000000000000000', '11100':'0b00000000000000000000000000000000', '11101':'0b00000000000000000000000000000000',
    '11110':'0b00000000000000000000000000000000', '11111':'0b00000000000000000000000000000000'
}

B_opcode = '1100011'
J_opcode = '1101111'
R_opcode = '0110011'
S_opcode = '0100011'
U_opcode = {'0110111':'lui', '0010111':'auipc'}
I_opcode = {'0000011':'lw', '0010011':'addi', '0010011':'sltiu', '1100111':'jalr'}

#b_type instructions
def beq(rs1, rs2, imm):
    if rs1 == rs2:
        PC += imm
    return PC

def bne(rs1, rs2, imm):
    if rs1 != rs2:
        PC += imm
    return PC

def blt(rs1, rs2, imm):
    if rs1 >= rs2:
        PC += imm
    return PC

def bge(rs1, rs2, imm):
    if rs1 >= rs2:
        PC += imm
    return PC

def bltu(rs1, rs2, imm):
    if rs1 < rs2:
        PC += imm
    return PC

def bgeu(rs1, rs2, imm):
    if rs1 >= rs2:
        PC += imm
    return PC

#for aditi, 
#  the last two, ie bgeu and bltu, rs1 and rs2 have the unsigned value right, and for the others, its the sign extention wala value? i mean that's what i got from the inst pdf lol.
#also what I did is the literal conversion of the instructions. do tell me about the mistakes tho. i'll do the rest in the morning. def (b) and all
